// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             String   @id @default(uuid()) @db.Char(36)
  nome           String   @db.VarChar(100)
  email          String   @unique @db.VarChar(100)
  senha          String   @db.VarChar(100)
  tipoUsuario    String   @db.Char(36)
  saldo          Decimal  @db.Decimal(9, 2)

  compras Compra[]

  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("usuarios")
}

model Evento {
  id            Int      @id @default(autoincrement()) @db.Int()
  titulo        String   @db.VarChar(100)
  descricao     String   @db.Text()
  localizacao   String   @db.VarChar(100)
  categoria     String   @db.Char(100)
  faixaEtaria   Int      @db.Int
  preco         Decimal  @db.Decimal(9, 2)
  
  ticket        Ticket?
  compras       Compra[]

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("eventos")
}

model Ticket {
  id         String   @id @default(uuid()) @db.Char(36)

  eventoId   Int      @unique @db.Int()

  evento     Evento   @relation(fields: [eventoId], references: [id])
  compra     Compra?

  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("tickets")
}

model Compra {
  id             String   @id @default(uuid()) @db.Char(36)
  formaPagamento String   @db.VarChar(50)
  valor          Decimal  @db.Decimal(9, 2)
  status         String   @db.VarChar(50)
  
  usuarioId      String   @db.Char(36)
  ticketId       String   @unique @db.Char(36)
  eventoId       Int      @db.Int()

  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
  ticket         Ticket   @relation(fields: [ticketId], references: [id])
  evento         Evento   @relation(fields: [eventoId], references: [id])
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("compras")
}
