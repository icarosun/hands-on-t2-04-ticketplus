generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex", "views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comprador {
  id    String @id @default(uuid()) @db.Char(36)
  nome  String @db.VarChar(100)
  email String @unique @db.VarChar(100)
  cpf   String @unique @db.Char(11)
  senha String @db.VarChar(100)

  pedidos               Pedido[]
  totalTicketsComprados TotalTicketsComprados[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("compradores")
}

model Organizador {
  id        String   @id @default(uuid()) @db.Char(36)
  nome      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  senha     String   @db.VarChar(100)
  conta     String   @db.VarChar(30)
  cnpj      String   @db.Char(18)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  eventos   Evento[]

  @@map("organizadores")
}

model Evento {
  id          Int      @id @default(autoincrement()) @db.Int()
  titulo      String
  descricao   String   @db.Text()
  localizacao String   @db.VarChar(100)
  faixaEtaria Int      @db.Int
  vagas       Int      @db.Int
  // imageUrl          String   @db.VarChar(100)
  dataInicio  DateTime @db.DateTime()
  dataFim     DateTime @db.DateTime()

  organizadorId     String @db.Char(36)
  categoriaEventoId Int    @db.Int()
  enderecoEventoId  Int    @db.Int()

  ticket  Ticket[]
  pedidos Pedido[]

  tiposTicketsEventos   TiposTicketsEventos[]
  totalTicketsComprados TotalTicketsComprados[]

  Organizador     Organizador      @relation(fields: [organizadorId], references: [id])
  CategoriaEvento CategoriaEvento  @relation(fields: [categoriaEventoId], references: [id])
  EnderecoEvento  EnderecosEventos @relation(fields: [enderecoEventoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@fulltext([titulo])
  @@map("eventos")
}

model EnderecosEventos {
  id        Int      @id @default(autoincrement())
  cep       String   @db.Char(8)
  numero    Int?
  cidade    String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  eventos   Evento[]

  @@map("enderecosEventos")
}

model Ticket {
  id           String     @id @default(uuid()) @db.Char(36)
  eventoId     Int
  tipoTicketId Int
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  compra       Compra?
  evento       Evento     @relation(fields: [eventoId], references: [id])
  tipoTicket   TipoTicket @relation(fields: [tipoTicketId], references: [id])

  @@index([eventoId], map: "tickets_eventoId_fkey")
  @@index([tipoTicketId], map: "tickets_tipoTicketId_fkey")
  @@map("tickets")
}

model Pedido {
  id             String  @id @default(uuid()) @db.Char(36)
  formaPagamento String  @db.VarChar(50)
  quantidade     Int     @db.Int()
  valor          Decimal @db.Decimal(9, 2)
  status         String  @db.VarChar(50)

  compradorId  String @db.Char(36)
  eventoId     Int    @db.Int()
  tipoTicketId Int    @db.Int()

  comprador  Comprador  @relation(fields: [compradorId], references: [id])
  evento     Evento     @relation(fields: [eventoId], references: [id])
  tipoTicket TipoTicket @relation(fields: [tipoTicketId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("pedidos")
}

model Compra {
  id String @id @default(uuid()) @db.Char(36)

  pedidoId String @unique @db.Char(36)
  ticketId String @unique @db.Char(36)

  ticket Ticket @relation(fields: [ticketId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("compras")
}

model TipoTicket {
  id                  Int                   @id @default(autoincrement())
  descricao           String                @db.VarChar(50)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at")
  pedido              Pedido[]
  ticket              Ticket[]
  tiposTicketsEventos TiposTicketsEventos[]

  @@map("tipoTickets")
}

model TiposTicketsEventos {
  tipoTicketId Int
  eventoId     Int
  quantidade   Int
  preco        Decimal    @db.Decimal(9, 2)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  evento       Evento     @relation(fields: [eventoId], references: [id])
  tipoTicket   TipoTicket @relation(fields: [tipoTicketId], references: [id])

  @@id([eventoId, tipoTicketId])
  @@index([tipoTicketId], map: "tipoTicketsEventos_tipoTicketId_fkey")
  @@map("tipoTicketsEventos")
}

model TotalTicketsComprados {
  cpfComprador          String @db.Char(11)
  eventoId              Int    @db.Int()
  totalTicketsComprados Int    @db.Int()

  comprador Comprador @relation(fields: [cpfComprador], references: [cpf])
  evento    Evento    @relation(fields: [eventoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([cpfComprador, eventoId])
  @@map("totalTicketsComprados")
}

model CategoriaEvento {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  evento    Evento[]

  @@map("categoriaEvento")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view resumoGraficoGeral {
  id          Int    @default(0)
  evento      String @db.VarChar(100)
  organizador String @db.Char(36)
  disponivel  Int
  tipo_ticket String @db.VarChar(50)
  vendidos    BigInt @default(0)
  restante    BigInt @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view resumoGraficoFinanceiroGeral {
  id          Int     @default(0)
  evento      String  @db.VarChar(100)
  organizador String  @db.Char(36)
  tipo_ticket String  @db.VarChar(50)
  vendidos    BigInt  @default(0)
  preco       Decimal @db.Decimal(9, 2)
  total       Decimal @default(0.00) @db.Decimal(29, 2)

  @@ignore
}
