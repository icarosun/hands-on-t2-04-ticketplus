// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comprador {
  id        String   @id @default(uuid()) @db.Char(36)
  nome      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  cpf       String   @unique @db.Char(11)
  senha     String   @db.VarChar(100)
  saldo          Decimal  @db.Decimal(9, 2)
  pedidos    Pedido[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("compradores")
}

model Organizador {
  id    String @id @default(uuid()) @db.Char(36)
  nome  String @db.VarChar(100)
  email String @unique @db.VarChar(100)
  senha String @db.VarChar(100)
  conta String @db.VarChar(30)
  cnpj  String @db.Char(18)

  eventos Evento[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("organizadores")
}

model Evento {
  id                Int     @id @default(autoincrement()) @db.Int()
  titulo            String  @db.VarChar(100)
  descricao         String  @db.Text()
  localizacao       String  @db.VarChar(100)
  faixaEtaria       Int     @db.Int
  vagas             Int     @db.Int
  // imageUrl          String   @db.VarChar(100)
  organizadorId     String  @db.Char(36)
  categoriaEventoId Int     @db.Int()
  enderecoEventoId  Int     @db.Int()

  ticket     Ticket[]
  pedidos    Pedido[]
  tiposTicketsEventos TiposTicketsEventos[]

  Organizador     Organizador     @relation(fields: [organizadorId], references: [id])
  CategoriaEvento CategoriaEvento @relation(fields: [categoriaEventoId], references: [id])
  EnderecoEvento  EnderecosEventos  @relation(fields: [enderecoEventoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("eventos")
}

model EnderecosEventos {
  id      Int     @id @default(autoincrement()) @db.Int()
  cep     String  @db.Char(8)
  numero  Int?     @db.Int()
  cidade  String  @db.VarChar(100)

  eventos Evento[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("enderecosEventos")
}

model Ticket {
  id           String   @id @default(uuid()) @db.Char(36)
  eventoId     Int      @db.Int()
  tipoTicketId Int   @db.Int()

  tipoTicket TipoTicket @relation(fields: [tipoTicketId], references: [id])
  evento     Evento     @relation(fields: [eventoId], references: [id])
  compra     Compra[]

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("tickets")
}

model Pedido {
  id              String   @id @default(uuid()) @db.Char(36)
  formaPagamento  String   @db.VarChar(50)
  quantidade      Int      @db.Int()
  valor           Decimal  @db.Decimal(9, 2)
  status          String   @db.VarChar(50)

  compradorId     String   @db.Char(36)
  eventoId        Int      @db.Int()
  tipoTicketId    Int      @db.Int()

  comprador       Comprador      @relation(fields: [compradorId], references: [id])
  evento          Evento         @relation(fields: [eventoId], references: [id])
  tipoTicket      TipoTicket     @relation(fields: [tipoTicketId], references: [id])

  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

  @@map("pedidos")
}

model Compra {
  id             String   @id @default(uuid()) @db.Char(36)

  pedidoId       String   @db.Char(36)
  ticketId       String   @db.Char(36)

  ticket  Ticket          @relation(fields: [ticketId], references: [id])

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("compras")
}

model TipoTicket {
  id         Int    @id @default(autoincrement()) @db.Int()
  descricao  String @db.VarChar(50)

  ticket              Ticket[]
  tiposTicketsEventos TiposTicketsEventos[]
  pedido              Pedido[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("tipoTickets")
}

model TiposTicketsEventos {
  eventoId       Int @db.Int()
  tipoTicketId   Int @db.Int()
  quantidade     Int @db.Int()
  preco          Decimal  @db.Decimal(9, 2)

  evento     Evento @relation(fields: [eventoId], references: [id])
  tipoTicket TipoTicket @relation(fields: [tipoTicketId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([eventoId, tipoTicketId])
  @@map("tipoTicketsEventos")
}

model TotalTicketsComprados {
  cpfComprador          String  @db.Char(11)
  eventoId              Int     @db.Int()
  totalTicketsComprados Int @db.Int()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([cpfComprador, eventoId])
  @@map("totalTicketsComprados")
}

model CategoriaEvento {
  id        Int    @id @default(autoincrement()) @db.Int()
  descricao String @unique @db.VarChar(50)

  evento Evento[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("categoriaEvento")
}
